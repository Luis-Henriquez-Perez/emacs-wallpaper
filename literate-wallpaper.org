#+title: =wallpaper.el=: Setting the wallpaper with Emacs
#+subtitle: A literate Emacs package for wallpaper management
#+author: Farlado
#+startup: hideblocks

* Table of contents :toc:quote:
#+BEGIN_QUOTE
- [[#about][About]]
  - [[#license][License]]
  - [[#installation][Installation]]
  - [[#caveat-lector][Caveat lector]]
- [[#configuration][Configuration]]
  - [[#static-wallpapers][Static wallpaper(s)]]
  - [[#wallpaper-cycle-speed][Wallpaper cycle speed]]
  - [[#setting-multiple-wallpapers][Setting multiple wallpapers]]
  - [[#setting-the-wallpaper-style][Setting the wallpaper style]]
  - [[#setting-the-background-color][Setting the background color]]
  - [[#setting-the-wallpaper-directory][Setting the wallpaper directory]]
- [[#setting-the-wallpaper-once][Setting the wallpaper once]]
  - [[#static-wallpapers-1][Static wallpaper(s)]]
  - [[#random-wallpapers][Random wallpaper(s)]]
  - [[#arguments-for-feh-command][Arguments for ~feh~ command]]
- [[#cycling-wallpapers-automatically][Cycling wallpapers automatically]]
#+END_QUOTE

* About
Ricing [[https://github.com/ch11ng/exwm][EXWM]] is pretty cool, but even cooler is being able to manage everything about your rice using Emacs. This package is meant to make that a little bit easier, by managing your wallpapers for you. Compatibility is only guaranteed in X desktop sessions.

This package was written literately, so code is included alongside the documentation.
#+begin_src emacs-lisp :noweb yes :tangle "wallpaper.el"
  ;;; wallpaper.el --- Setting the desktop wallpaper -*- lexical-binding: t -*-

  ;; Copyright (C) 2020

  ;; Author: Farlado <farlado@sdf.org>
  ;; URL: https://github.com/farlado/emacs-wallpaper
  ;; Keywords: unix, wallpaper, extensions
  ;; Package-Version: 0.0.1
  ;; Package-Requires: ((emacs "25.1"))

  ;; This file is not part of GNU Emacs.

  <<license>>

  

  ;;; Commentary:

  ;; Ricing `exwm' is pretty cool, but even cooler is being able to manage
  ;; everything about your rice using Emacs.  This package is meant to
  ;; make that a little bit easier, by managing your wallpapers for you.
  ;;
  ;; By default, wallpapers are assumed to be stored in the path
  ;; $XDG_CONFIG_HOME/wallpapers, but you are free to change this,
  ;; or set a list of static wallpapers to use instead of randomly
  ;; choosing what wallpapers to use.  The program used to set the
  ;; wallpaper is feh, so make sure you have it installed.
  ;;
  ;; Compatibility is only guaranteed with use of an X desktop session.

  

  ;;; Code:
#+end_src

** License
This package is licensed under version 3 of the GNU General Public License.
#+name: license
#+begin_src emacs-lisp
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.
#+end_src

** Installation
Eventually I'll get this package on MELPA, just you wait and see... Till then, you're on your own to clone this repository and get it added to your =load-path=. An example configuration using ~use-package~ is included below:
#+begin_src emacs-lisp
  ;; This is an example `use-package' configuration
  ;; It is not tangled into wallpaper.el
  (use-package wallpaper
    :load-path "lisp/wallpaper"
    :hook ((exwm-randr-screen-change . wallpaper-set-wallpaper)
           (after-init . wallpaper-cycle-mode))
    :config
    (setq wallpaper-single t
          wallpaper-style 'scale
          wallpaper-cycle-interval 45
          wallpaper-directory (expand-file-name "~/Pictures/wallpapers")))
#+end_src

However, no amount of hand-holding can ensure you have the dependency ~feh~ installed, or that you are loading this package while in an X desktop session.
#+begin_src emacs-lisp :tangle "wallpaper.el"
  (unless (executable-find "feh")
    (display-warning 'wallpaper "Could not find feh, is it installed?"))

  
#+end_src

** Caveat lector
Right now, this thing is still quite rough around the edges. As it gets ready for MELPA, it'll probably go through a lot of fixes.

* Configuration
  :properties:
  :header-args: :tangle "wallpaper.el"
  :end:
Settings for this package can be configured using ~customize~. This can be done by doing =M-x customize-group RET wallpaper RET=.
#+begin_src emacs-lisp
  (defgroup wallpaper nil
    "Setting the wallpaper using Emacs."
    :tag "Wallpaper"
    :group 'environment
    :prefix "wallpaper-")

  
#+end_src

** Static wallpaper(s)
If you only want to use a certain wallpaper or set of wallpapers across monitors, set =wallpaper-static-wallpaper-list= to a list of strings, each string being an absolute path to an image file. By default, this variable is left unset.
#+begin_src emacs-lisp
  (defcustom wallpaper-static-wallpaper-list nil
    "List of wallpapers to use instead of randomly finding wallpapers.

  Wallpapers must be entered in this list as absolute paths, in the order
  of your monitors.  This variable should be nil if you intend to use
  `wallpaper-cycle-mode'."
    :tag "Static wallpaper(s)"
    :group 'wallpaper
    :type 'list)
#+end_src

** Wallpaper cycle speed
If you are cycling through your wallpapers automatically and want to make wallpaper cycling faster or slower, set =wallpaper-cycle-interval= to the number of seconds you want to see each wallpaper. The default is a likely blazing fast fifteen seconds.
#+begin_src emacs-lisp
  (defcustom wallpaper-cycle-interval 15
    "Interval in seconds for cycling between wallpapers in wallpaper slideshows."
    :tag "Wallpaper cycle interval"
    :group 'wallpaper
    :type 'integer)
#+end_src

** Setting multiple wallpapers
This setting is not respected by =wallpaper-static-wallpaper-list= because its behavior is already possible by only having one path in that list. If you are wanting to use the same wallpaper on each monitor, set =wallpaper-single= to a non-nil value.
#+begin_src emacs-lisp
  (defcustom wallpaper-single nil
    "Whether to use one wallpaper across all monitors.

  This setting is not respected when `wallpaper-static-wallpapers' is
  non-nil.  To have only one wallpaper for all monitors, ensure only
  one path is listed in `wallpaper-static-wallpapers'."
    :tag "Single wallpaper"
    :group 'wallpaper
    :type 'boolean)
#+end_src

** Setting the wallpaper style
There are five values possible for =wallpaper-style=:
- =scale=: Scale the image to fit the screen, potentially distorting the image
- =max=: Show the whole image, leaving portions of the screen uncovered
- =fill=: Fill the entire screen, cutting off regions of the image
- =tile=: Tile the image across the screen for small images
- =center=: Center the image on the screen
By default, ='fill= is the value of =wallpaper-style=.
#+begin_src emacs-lisp
  (defcustom wallpaper-style 'fill
    "What style of wallpaper scaling to use."
    :tag "Wallpaper style"
    :group 'wallpaper
    :type '(radio (const :tag "Scale" scale)
                  (const :tag "Maximize" max)
                  (const :tag "Fill" fill)
                  (const :tag "Tile" tile)
                  (const :tag "Center" center)))
#+end_src

** Setting the background color
When =max= is the value for =wallpaper-style=, it leaves some portions of the screen uncovered by the image. Setting =wallpaper-background= to a valid hex code or XColor will change the color shown behind the image.
#+begin_src emacs-lisp
  (defcustom wallpaper-background "#000000"
    "The background color to display behind the wallpaper."
    :tag "Background color"
    :group 'wallpaper
    :type 'string)
#+end_src

** Setting the wallpaper directory
By default, wallpapers are searched for in =~/.config/wallpapers=, but of course not everyone may want to store their wallpapers there, in which case you'll have to set =wallpaper-directory= to where wallpapers are stored.
#+begin_src emacs-lisp
  (defcustom wallpaper-directory (expand-file-name "~/.config/wallpapers")
    "The directory in which to look for wallpapers."
    :tag "Wallpaper directory"
    :group 'wallpaper
    :type 'string)

  
#+end_src

* Setting the wallpaper once
The function ~wallpaper-set-wallpaper~ can be used to set the wallpaper one time. If =wallpaper-static-wallpaper-list= is not set, it will randomly choose a PNG or JPG image found in =wallpaper-directory=. This function can be called interactively was well as in your configurations.

If you are using this package with EXWM, I would highly recommend you add ~wallpaper-set-wallpaper~ to =exwm-randr-screen-change-hook= or add the command to a function that is already in said hook. This way, every time you change monitors, the wallpaper is also automatically set and looks right.

All the headers that follow relate specifically to how the function works, and are more oriented towards those looking to understand the rationale behind the function in order to +tell me how horribly the function is written+ help improve it. Feel free to skip on ahead if this doesn't interest you. The short version of this is that a string is created with the ~feh~ command to be executed, and then a process is started to execute the command.
#+begin_src emacs-lisp :noweb yes :tangle "wallpaper.el"
  <<wallpaper--current>>

  

  <<wallpaper--style>>

  <<wallpaper--background>>

  

  <<wallpaper--wallpapers>>

  <<wallpaper--num-monitors>>

  

  <<wallpaper--random-command>>

  <<wallpaper--static-command>>

  

  ;;;###autoload
  (defun wallpaper-set-wallpaper ()
    "Set the wallpaper.

  This function will either choose a random wallpaper from
  `wallpaper-directory' or use the wallpapers listed in
  `wallpaper-static-wallpaper-list'."
    (interactive)
    (start-process-shell-command
     "Wallpaper" nil (if wallpaper-static-wallpaper-list
                         (wallpaper--static-command)
                       (wallpaper--random-command))))

  
#+end_src

** Static wallpaper(s)
The process for static wallpapers is incredibly straightforward: for each wallpaper in =wallpaper-static-wallpaper-list=, add it with the proper style argument to the command string.
#+name: wallpaper--static-command
#+begin_src emacs-lisp
  (defun wallpaper--static-command ()
    "Return a feh command from wallpapers in `wallpaper-static-wallpaper-list'."
    (let ((command (concat "feh " (wallpaper--background))))
      ;; Add a wallpaper for each wallpaper in `wallpaper-static-wallpaper-list'
      (dolist (wallpaper wallpaper-static-wallpaper-list)
        (setq command (concat command (wallpaper--style) wallpaper " ")))
      ;; Return the command
      command))
#+end_src

** Random wallpaper(s)
The overall process has two over-arching steps. First, a list is gathered of all available wallpapers in =wallpaper-directory=. Then, the wallpapers currently in use are removed from that list. During this step, the list of wallpapers currently in use is also cleared. Then, for each monitor that can be detected as active by ~xrandr~, a random wallpaper with the proper style argument is appended to the command string.
#+name: wallpaper--random-command
#+begin_src emacs-lisp
  (defun wallpaper--random-command ()
    "Return a feh command for random wallpaper assignment."
    (let* ((command (concat "feh " (wallpaper--background)))
           (wallpapers (wallpaper--update-available))
           (num-wallpapers (length wallpapers))
           (num-monitors (if wallpaper-single 1 (wallpaper--num-monitors))))
      ;; Add as many wallpapers to the command as there are monitors
      ;; Add the wallpapers used to `wallpaper--current'
      (dotimes (monitor num-monitors)
        (let ((wallpaper (nth (random num-wallpapers) wallpapers)))
          (setq command (concat command (wallpaper--style) wallpaper " ")
                wallpapers (delq wallpaper wallpapers))
          (add-to-list 'wallpaper--current wallpaper)))
      ;; Return the command
      command))
#+end_src

*** Getting the available wallpapers
A variable =wallpaper--current= keeps track of the wallpaper(s) currently in use.
#+name: wallpaper--current
#+begin_src emacs-lisp
  (defvar wallpaper--current nil
    "List of the wallpaper(s) currently in use.

  This variable is set automatically by `wallpaper-set-wallpaper'.  Hand
  modification of its value may interfere with its proper behavior.")
#+end_src

Every file with the extension =png= or =jpg= (case-insensitive) inside of =wallpaper-directory= or its sub-directories is listed by the command ~wallpaper--wallpapers~, and ~wallpaper--update-available~ clears =wallpaper--current= and returns a list of all wallpapers except those which were in =wallpaper--current=.
#+name: wallpaper--wallpapers
#+begin_src emacs-lisp
  (defun wallpaper--wallpapers ()
    "Return a list of absolute paths for images found in `wallpaper-directory'."
    (directory-files-recursively wallpaper-directory ".[jpJP][engENG]+$" nil t t))

  (defun wallpaper--update-available ()
    "Return the value returned by `wallpaper--wallpapers' with modification.

  This function removes the values in the list `wallpaper--current' from its
  return value and clears the list as well."
    (let ((wallpapers (wallpaper--wallpapers))
          (current-wallpapers wallpaper--current))
      (setq wallpaper--current nil)
      (dolist (wallpaper current-wallpapers)
        (setq wallpapers (delq wallpaper wallpapers)))
      wallpapers))
#+end_src

*** Getting the number of active monitors
The function ~wallpaper--num-monitors~ is used to determine exactly how many monitors are connected, by splitting a string formed by a shell command with a bit of plumbing to print only one word per active monitor.
#+name: wallpaper--num-monitors
#+begin_src emacs-lisp
  (defun wallpaper--num-monitors ()
    "Return the number of connected monitors found by xrandr."
    (length (split-string (shell-command-to-string
                           "xrandr | grep \\* | awk '{print $1}'"))))
#+end_src

** Arguments for ~feh~ command
*** Wallpaper style argument
Depending on the value of =wallpaper-style=, ~wallpaper--style~ returns the string to use as the wallpaper style argument for ~feh~.
#+name: wallpaper--style
#+begin_src emacs-lisp
  (defun wallpaper--style ()
    "Return the style of background to use for images as an argument for feh."
    (case wallpaper-style
      (scale "--bg-scale ")
      (max "--bg-max ")
      (fill "--bg-fill ")
      (tile "--bg-tile ")
      (center "--bg-center ")))
#+end_src

*** Background color argument
The background color assigned in =wallpaper-background= is returned by ~wallpaper--background~ as a string to add to the ~feh~ command.
#+name: wallpaper--background
#+begin_src emacs-lisp
  (defun wallpaper--background ()
    "Return the background color to use as an argument for feh."
    (concat "--image-bg '" wallpaper-background "' "))
#+end_src

* Cycling wallpapers automatically
Maybe, like me, even having a unique wallpaper on each monitor isn't enough. You may want to cycle through your wallpapers and just sit idly all day watching the hundreds of wallpapers you have stored move by. In light of this need, I have a minor mode for that: ~wallpaper-cycle-mode~.
#+begin_src emacs-lisp :tangle "wallpaper.el"
  ;;;###autoload
  (define-minor-mode wallpaper-cycle-mode
    "Toggle Wallpaper Cycle mode.

  This mode will activate a timer which will call `wallpaper-set-wallpaper'
  at the interval defined by `wallpaper-cycle-interval'.  See function
  `wallpaper--toggle-cycle' for more information."
    :lighter " WP"
    :global t
    :group 'wallpaper
    (wallpaper--toggle-cycle))

  (defun wallpaper--toggle-cycle ()
    "Stop all existent `wallpaper-set-wallpaper' timers and start a new one if `wallpaper-cycle-mode' is non-nil."
    (cancel-function-timers 'wallpaper-set-wallpaper)
    (when wallpaper-cycle-mode
      (run-with-timer 0 wallpaper-cycle-interval 'wallpaper-set-wallpaper)))

  

  (provide 'wallpaper)

  ;;; wallpaper.el ends here
#+end_src
