#+title: =wallpaper.el=: Setting the wallpaper
#+subtitle: A literate Emacs package for wallpaper management
#+author: Farlado
#+startup: hideblocks
#+property: header-args :tangle "wallpaper.el"
#+export_exclude_tags: noexport

* Table of contents :toc:quote:
#+BEGIN_QUOTE
- [[#about-this-package][About this Package]]
  - [[#license][License]]
  - [[#installation][Installation]]
  - [[#caveat-lector][Caveat lector]]
- [[#configuration][Configuration]]
  - [[#per-workspace-wallpapers][Per-workspace wallpapers]]
  - [[#static-wallpapers][Static wallpaper(s)]]
  - [[#cycling-wallpapers][Cycling wallpapers]]
  - [[#wallpaper-style][Wallpaper style]]
- [[#setting-the-wallpaper-once][Setting the wallpaper once]]
  - [[#arguments-for-feh-command][Arguments for ~feh~ command]]
  - [[#per-workspace-wallpapers-1][Per-workspace wallpaper(s)]]
  - [[#static-wallpapers-1][Static wallpaper(s)]]
  - [[#random-wallpapers][Random wallpaper(s)]]
- [[#cycling-wallpapers-automatically][Cycling wallpapers automatically]]
- [[#per-workspace-wallpapers-2][Per-workspace wallpapers]]
#+END_QUOTE

* About this Package

  Ricing [[https://github.com/ch11ng/exwm][EXWM]] is pretty cool, but even cooler is being able to manage everything
  about your rice using Emacs. This package is meant to make that a little bit
  easier, by managing your wallpapers for you. Compatibility is only guaranteed
  in X desktop sessions. Using this package with EXWM is the intention, but it
  can serve as a wallpaper daemon on other window managers with some work.

  This package was written using literate programming, so code is included
  alongside the documentation.

  #+begin_src emacs-lisp :noweb yes
    ;;; wallpaper.el --- Setting the wallpaper -*- lexical-binding: t -*-

    ;; Copyright (C) 2020

    ;; Author: Farlado <farlado@sdf.org>
    ;; URL: https://github.com/farlado/emacs-wallpaper
    ;; Keywords: unix, wallpaper, extensions
    ;; Package-Version: 1.1.0
    ;; Package-Requires: ((emacs "25.1"))

    ;; This file is not part of GNU Emacs.

    <<license>>

    

    ;;; Commentary:

    ;; Ricing `exwm' is pretty cool, but even cooler is being able to manage
    ;; everything about your rice using Emacs.  This package is meant to
    ;; make that a little bit easier, by managing your wallpapers for you.
    ;;
    ;; The provided modes are `wallpaper-cycle-mode' for cycling randomly
    ;; through wallpapers in a directory, and `wallpaper-per-workspace-mode'
    ;; for setting a specific wallpaper or wallpapers in each workspace or
    ;; a window manager.
    ;;
    ;; The following window managers are known to work with this package:
    ;; - EXWM
    ;; - Any that use vdesk for virtual desktops
    ;;
    ;; The following might work but aren't fully tested:
    ;; - i3
    ;;
    ;; Compatibility is only guaranteed with use of an X desktop session.

    

    ;;; Code:
  #+end_src

** License

   This package is licensed under version 3 of the GNU General Public License.

   #+name: license
   #+begin_src emacs-lisp :tangle no
     ;; This program is free software; you can redistribute it and/or modify
     ;; it under the terms of the GNU General Public License as published by
     ;; the Free Software Foundation, either version 3 of the License, or
     ;; (at your option) any later version.

     ;; This program is distributed in the hope that it will be useful,
     ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
     ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     ;; GNU General Public License for more details.

     ;; You should have received a copy of the GNU General Public License
     ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.
   #+end_src

** Installation

   Eventually I'll get this package on MELPA, just you wait and see... Till
   then, you're on your own to clone this repository and get it added to your
   =load-path=. An example configuration using ~use-package~ is included below:

   #+begin_src emacs-lisp :tangle no
     ;; This is an example `use-package' configuration
     ;; It is not tangled into wallpaper.el
     (use-package wallpaper
       :load-path "lisp/wallpaper"
       :hook ((exwm-randr-screen-change . wallpaper-set-wallpaper)
              (after-init . wallpaper-cycle-mode))
       :custom ((wallpaper-single t)
                (wallpaper-scaling 'scale)
                (wallpaper-cycle-interval 45)
                (wallpaper-directory "~/Pictures/wallpapers")))
   #+end_src

   However, no amount of hand-holding can ensure you have the dependency ~feh~
   installed, or that you are loading this package while in an X desktop
   session.

   #+begin_src emacs-lisp
     (unless (executable-find "feh")
       (display-warning 'wallpaper "Could not find feh, is it installed?"))
   #+end_src

   This package also depends on ~cl-lib~.

   #+begin_src emacs-lisp
     (require 'cl-lib)
   #+end_src

** Caveat lector

   Right now, this thing is still quite rough around the edges. As it gets
   ready for MELPA, it'll probably go through a lot of fixes. Do not hesitate
   to open an issue or request a new feature, and I will see to it that I do
   what I can.

* Configuration

  #+begin_src emacs-lisp :exports none
    
  #+end_src

  Settings for this package can be configured using ~customize~. This can be done
  by doing =M-x customize-group RET wallpaper RET=.

  #+begin_src emacs-lisp
    (defgroup wallpaper nil
      "Setting the wallpaper."
      :tag "Wallpaper"
      :group 'environment
      :prefix "wallpaper-")
  #+end_src

** Per-workspace wallpapers

   #+begin_src emacs-lisp :exports none
     
   #+end_src

*** Choosing wallpapers for workspaces

    If you wish to have a unique wallpaper or set of wallpapers for each
    workspace, assign one or multiple wallpapers as absolute paths in a string
    to a workspace using the variable =wallpaper-per-workspace-alist=. A blank
    string or nil on a workspace means deferring either to static wallpaper(s)
    or a random wallpaper if =wallpaper-static-wallpapers= is blank.

    #+begin_src emacs-lisp
      (defcustom wallpaper-per-workspace-alist nil
        "List of wallpapers per workspace.

      Each item is (WORKSPACE . WALLPAPERS).  When WORKSPACE is the current
      workspace, WALLPAPERS are the wallpapers to be set."
        :tag "Per-workspace alist"
        :group 'wallpaper
        :type '(alist :key-type (number :tag "Workspace")
                      :value-type (string :tag "Wallpaper(s)")))
    #+end_src

    An example may look as follows:

    #+begin_src emacs-lisp :tangle no
      ;; This is an example, not tangled into wallpaper.el
      (setq wallpaper-per-workspace-alist '((0 . "/path/to/0.png")
                                            (1 . "/path/to/1.png")
                                            (2 . nil)
                                            (3 . "/so/on/so/forth/2.png")
                                            ...))
    #+end_src

*** Getting the workspace number

    Per-workspace wallpaper compatibility is ONLY guaranteed with EXWM, but I've
    left enough for this to be used with other window managers with good enough
    configuration. Once I've got some experience using it with other WMs, I'll
    leave a guide in the about section.

    In the meantime, =wallpaper-per-workspace-get= points to the function used to
    get the current workspace. The function ~wallpaper-per-workspace-exwm-get~
    is provided for use with EXWM. This is the default value for this variable.
    There is also a function for i3: ~wallpaper-per-workspace-i3-get~.

    #+begin_src emacs-lisp
      (defcustom wallpaper-per-workspace-get #'wallpaper-per-workspace-exwm-get
        "What function to use for determining the current workspace."
        :tag "Per-workspace function"
        :group 'wallpaper
        :type 'function)
    #+end_src

** Static wallpaper(s)

   #+begin_src emacs-lisp :exports none
     
   #+end_src

   If you only want to use a certain wallpaper or set of wallpapers across
   monitors, set =wallpaper-static-wallpapers= to a string containing multiple
   absolute paths to the desired wallpapers, in the order of the monitors they
   should be on.

   #+begin_src emacs-lisp
     (defcustom wallpaper-static-wallpapers ""
       "List of wallpapers to use instead of randomly finding wallpapers.

     Wallpapers must be entered in this list as absolute paths, in the order
     of your monitors.  This string should be left blank if you intend to use
     function `wallpaper-cycle-mode'."
       :tag "Static wallpaper(s)"
       :group 'wallpaper
       :type 'string)
   #+end_src

   For instance, if I wanted =1.png= on my first monitor, =3.png= on my second
   monitor, and =2.png= on my third monitor, I would have to arrange them in the
   string as:

   #+begin_src emacs-lisp :tangle no
     ;; This is an example, not tangled into wallpaper.el
     (setq wallpaper-static-wallpapers "1.png 3.png 2.png")
   #+end_src

** Cycling wallpapers

   #+begin_src emacs-lisp :exports none
     
   #+end_src

*** Wallpaper cycle speed

    If you are cycling through your wallpapers automatically and want to make
    wallpaper cycling faster or slower, set =wallpaper-cycle-interval= to the
    number of seconds you want to see each wallpaper. The default is a likely
    blazing fast fifteen seconds.

    #+begin_src emacs-lisp
      (defcustom wallpaper-cycle-interval 15
        "Interval in seconds for cycling in function `wallpaper-cycle-mode'."
        :tag "Wallpaper cycle interval"
        :group 'wallpaper
        :type 'integer)
    #+end_src

*** Setting multiple wallpapers

    If you are wanting to use the same wallpaper on each monitor when cycling
    wallpapers, set =wallpaper-single= to non-nil.

    #+begin_src emacs-lisp
      (defcustom wallpaper-single nil
        "Whether to use one wallpaper across all monitors.

      This setting is not respected when `wallpaper-static-wallpapers' is
      non-nil.  To have only one wallpaper for all monitors, ensure only
      one path is listed in `wallpaper-static-wallpapers'."
        :tag "Single wallpaper"
        :group 'wallpaper
        :type 'boolean)
    #+end_src

*** Setting the wallpaper directory

    By default, wallpapers are searched for in =~/.config/wallpapers= when
    cycling wallpapers, but of course not everyone may want to store their
    wallpapers there, in which case you'll have to set the variable
    =wallpaper-directory= to where your wallpapers are stored.

    #+begin_src emacs-lisp
      (defcustom wallpaper-directory (expand-file-name "~/.config/wallpapers")
        "The directory in which to look for wallpapers."
        :tag "Wallpaper directory"
        :group 'wallpaper
        :type 'string)
    #+end_src

** Wallpaper style

   #+begin_src emacs-lisp :exports none
     
   #+end_src

*** Scaling

    There are five values possible for =wallpaper-scaling=:
    - =scale=: Scale the image to fit the screen, distorting the image
    - =max=: Show the whole image, leaving portions of the screen uncovered
    - =fill=: Fill the entire screen, cutting off regions of the image
    - =tile=: Tile the image across the screen for small images
    - =center=: Center the image on the screen

    By default, ='fill= is the value of =wallpaper-scaling=.

    #+begin_src emacs-lisp
      (defcustom wallpaper-scaling 'fill
        "What style of wallpaper scaling to use.

      The options are
      scale: Scale the image to fit the screen, distorting the image
      max: Show the whole image, leaving portions of the screen uncovered
      fill: Fill the entire screen, cutting off regions of the image
      tile: Tile the image across the screen for small images
      center: Center the image on the screen

      The default option is fill."
        :tag "Wallpaper style"
        :group 'wallpaper
        :type '(radio (const :tag "Scale" scale)
                      (const :tag "Maximize" max)
                      (const :tag "Fill" fill)
                      (const :tag "Tile" tile)
                      (const :tag "Center" center)))
    #+end_src

*** Background color

    When =max= is the value for =wallpaper-scaling=, it leaves some portions of the
    screen uncovered by the image. Setting =wallpaper-background= to a valid hex
    code or XColor will change the color shown behind the image.

    #+begin_src emacs-lisp
      (defcustom wallpaper-background "#000000"
        "The background color to display behind the wallpaper."
        :tag "Background color"
        :group 'wallpaper
        :type 'string)
    #+end_src

* Setting the wallpaper once

  #+begin_src emacs-lisp :exports none
    
  #+end_src

  The function ~wallpaper-set-wallpaper~ can be used to set the wallpaper one
  time. If =wallpaper-static-wallpapers= is not set, it will randomly choose
  a PNG or JPG image found in =wallpaper-directory=. This function can be called
  interactively was well as in your configurations.

  If you are using this package with EXWM, I would highly recommend you add
  ~wallpaper-set-wallpaper~ to =exwm-randr-screen-change-hook= or add the command
  to a function that is already in said hook. This way, every time you change
  monitors, the wallpaper is also automatically set and looks right.

  All the headers that follow relate specifically to how the function works,
  and are more oriented towards those looking to understand the rationale
  behind the function in order to +tell me how horribly the function is written+
  help improve it. Feel free to skip on ahead if this doesn't interest you. The
  short version of this is that a string is created with the ~feh~ command to be
  executed, and then a process is started to execute the command.

  #+begin_src emacs-lisp :noweb yes
    ;;;###autoload
    (defun wallpaper-set-wallpaper ()
      "Set the wallpaper.

    This function will either choose a random wallpaper from
    `wallpaper-directory' or use the wallpapers listed in
    `wallpaper-static-wallpapers'."
      (interactive)
      (let ((wallpapers (or (wallpaper--per-workspace-wallpapers)
                            (wallpaper--static-wallpapers)
                            (wallpaper--random-wallpapers)))
            (command (concat "feh --no-fehbg " (wallpaper--background))))
        (dolist (wallpaper wallpapers)
          (setq command (concat command (wallpaper--scaling) wallpaper " ")))
        (start-process-shell-command
         "Wallpaper" nil command)))
  #+end_src

** Arguments for ~feh~ command

   #+begin_src emacs-lisp :exports none
     
   #+end_src

   In order to properly form the wallpaper setting command, functions have been
   defined to return the flags required to properly construct the command.

*** Wallpaper style argument

    Depending on the value of =wallpaper-scaling=, ~wallpaper--scaling~ returns the
    string to use as the wallpaper style argument for ~feh~.

    #+begin_src emacs-lisp
      (defun wallpaper--scaling ()
        "Return the wallpaper scaling style to use."
        (cl-case wallpaper-scaling
          (scale "--bg-scale ")
          (max "--bg-max ")
          (fill "--bg-fill ")
          (tile "--bg-tile ")
          (center "--bg-center ")))
    #+end_src

*** Background color argument

    The background color assigned in =wallpaper-background= is returned by
    ~wallpaper--background~ as a string to add to the ~feh~ command.

    #+begin_src emacs-lisp
      (defun wallpaper--background ()
        "Return the background color to use as an argument for feh."
        (concat "--image-bg '" wallpaper-background "' "))
    #+end_src

** Per-workspace wallpaper(s)
   :properties:
   :header-args: :tangle no
   :end:

   #+name: per-workspace-funcs
   #+begin_src emacs-lisp :exports none :noweb yes
     <<per-workspace-wallpapers>>

     <<exwm>>

     <<i3>>

     <<vdesk>>
   #+end_src

   This one seemed simple at first but got really dumb.

   #+name: per-workspace-wallpapers
   #+begin_src emacs-lisp
     (defun wallpaper--per-workspace-wallpapers ()
       "Return the wallpapers for the given workspace.

     Returns nil if variable `wallpaper-per-workspace-mode' is nil."
       (when wallpaper-per-workspace-mode
         (split-string (or (cdr (assq (funcall wallpaper-per-workspace-get)
                                      wallpaper-per-workspace-alist))
                           ""))))
   #+end_src

*** Getting the current workspace in EXWM

    This is the default function for =wallpaper-per-workspace-get=. If EXWM is not
    configured, it will throw an error when trying to grab the current
    workspace.

    #+name: exwm
    #+begin_src emacs-lisp
      (defun wallpaper-per-workspace-exwm-get ()
        "Return the current EXWM workspace."
        (if (boundp 'exwm-workspace-current-index)
            exwm-workspace-current-index
          (display-warning 'wallpaper "Cannot get current EXWM workspace!")))
    #+end_src

*** Getting the current workspace in i3

    This one is provided since i3 is the most popular tiling window manager.

    #+name: i3
    #+begin_src emacs-lisp
      (defun wallpaper-per-workspace-i3-get ()
        "Get the current i3 workspace."
        (if (= (shell-command "pgrep i3") 0)
            (string-to-number
             (shell-command-to-string
              (concat "i3-msg -t get_workspaces | "
                      "jq -r '.[] | select(.focused==true).name'")))
          (display-warning 'wallpaper "Cannot get current i3 workspace!")))
    #+end_src

*** Getting the current workspace in vdesk

    I sometimes use twm so having this is nice.

    #+name: vdesk
    #+begin_src emacs-lisp
      (defun wallpaper-per-workspace-vdesk-get ()
        "Get the current vdesk."
        (if (executable-find "vdesk")
            (string-to-number (shell-command-to-string "vdesk"))
          (display-warning 'wallpaper "vdesk is not installed!")))
    #+end_src

** Static wallpaper(s)

   #+begin_src emacs-lisp :exports none
     
   #+end_src

   Plain dead simple.

   #+begin_src emacs-lisp
     (defun wallpaper--static-wallpapers ()
       "Return `wallpaper-static-wallpapers' as a split string."
       (split-string wallpaper-static-wallpapers))
   #+end_src

** Random wallpaper(s)
   :properties:
   :header-args: :tangle no
   :end:

   #+name: cycle-funcs
   #+begin_src emacs-lisp :noweb yes :exports none
     <<current>>

     <<random-wallpapers>>

     <<wallpapers>>

     <<num-monitors>>
   #+end_src

   The overall process has two over-arching steps. First, a list is gathered of
   all available wallpapers in =wallpaper-directory=. Then, the wallpapers
   currently in use are removed from that list. During this step, the list of
   wallpapers currently in use is also cleared. Then, for each monitor that can
   be detected as active by ~xrandr~, a random wallpaper with the proper style
   argument is appended to the command string.

   #+name: random-wallpapers
   #+begin_src emacs-lisp
     (defun wallpaper--random-wallpapers ()
       "Return a string of random wallpapers for each monitor.

     If `wallpaper-single' is non-nil, only one wallpaper is returned."
       (let* ((available (wallpaper--update-available))
              (num-available (length available))
              (num-monitors (if wallpaper-single 1 (wallpaper--num-monitors)))
              (wallpapers ""))
         ;; Add as many wallpapers to the string as there are monitors
         ;; Add the wallpapers used to `wallpaper--current'
         (dotimes (_ num-monitors)
           (let ((wallpaper (nth (random num-available) available)))
             (setq wallpapers (concat wallpapers wallpaper " ")
                   available (delq wallpaper available))
             (add-to-list 'wallpaper--current wallpaper)))
         ;; Return the string of wallpapers split
         (split-string wallpapers)))
   #+end_src

    A variable =wallpaper--current= keeps track of the current
    wallpaper(s) when using random wallpapers from a directory.

    #+name: current
    #+begin_src emacs-lisp
      (defvar wallpaper--current nil
        "List of the wallpaper(s) currently in use.

      This variable is set automatically.  Hand modification of its value
      may interfere with its proper behavior.")
    #+end_src

*** Getting possible wallpapers

    Every file with the extension =png= or =jpg= (case-insensitive) inside of
    =wallpaper-directory= or its sub-directories is listed by the command
    ~wallpaper--wallpapers~, and ~wallpaper--update-available~ clears
    =wallpaper--current= and returns a list of all wallpapers except those which
    were in =wallpaper--current=.

    #+name: wallpapers
    #+begin_src emacs-lisp
      (defun wallpaper--wallpapers ()
        "Return a list of images found in `wallpaper-directory'."
        (directory-files-recursively wallpaper-directory
                                     ".[jpJP][engENG]+$"
                                     nil t t))

      (defun wallpaper--update-available ()
        "Return `wallpaper--wallpapers' with modification.

      This function removes the values in the list `wallpaper--current' from
      its return value and clears the list as well."
        (let ((wallpapers (wallpaper--wallpapers))
              (current-wallpapers wallpaper--current))
          (setq wallpaper--current nil)
          (dolist (wallpaper current-wallpapers)
            (setq wallpapers (delq wallpaper wallpapers)))
          wallpapers))
    #+end_src

*** Getting the number of active monitors

    The function ~wallpaper--num-monitors~ is used to determine exactly how many
    monitors are connected, by splitting a string formed by a shell command
    with a bit of plumbing to print only one word per active monitor.

    #+name: num-monitors
    #+begin_src emacs-lisp
      (defun wallpaper--num-monitors ()
        "Return the number of connected monitors found by xrandr."
        (length (split-string (shell-command-to-string
                               "xrandr | grep \\* | awk '{print $1}'"))))
    #+end_src

* Cycling wallpapers automatically

  #+begin_src emacs-lisp :exports none
    
  #+end_src

  Maybe, like me, even having a unique wallpaper on each monitor isn't enough.
  You may want to cycle through your wallpapers and just sit idly all day
  watching the hundreds of wallpapers you have stored move by. In light of this
  need, I have a minor mode for that: ~wallpaper-cycle-mode~.

  #+begin_src emacs-lisp :noweb yes
    ;;;###autoload
    (define-minor-mode wallpaper-cycle-mode
      "Toggle Wallpaper Cycle mode.

    This mode will activate a timer which will call `wallpaper-set-wallpaper'
    at the interval defined by `wallpaper-cycle-interval'.  See function
    `wallpaper--toggle-cycle' for more information."
      :lighter " WP"
      :global t
      :group 'wallpaper
      (wallpaper--toggle-cycle))

    (defun wallpaper--toggle-cycle ()
      "Stop or start a `wallpaper-set-wallpaper' timer."
      (cancel-function-timers 'wallpaper-set-wallpaper)
      (when wallpaper-cycle-mode
        (run-with-timer 0 wallpaper-cycle-interval 'wallpaper-set-wallpaper)))

    <<cycle-funcs>>
  #+end_src

* Per-workspace wallpapers

  #+begin_src emacs-lisp :exports none
    
  #+end_src

  An idea someone gave me is setting a wallpaper per workspace. This is the
  product of that work. Enabling ~wallpaper-per-workspace-mode~ will attempt to
  hook the function ~wallpaper-set-wallpaper~ into =exwm-workspace-switch-hook=, or
  otherwise enable use of =wallpaper-per-workspace-alist= for determining what
  wallpaper(s) to use.

  #+begin_src emacs-lisp :noweb yes
    ;;;###autoload
    (define-minor-mode wallpaper-per-workspace-mode
      "Toggle Wallpaper Per Workspace mode.

    This mode will set specific wallpapers based on the current workspace.
    See `wallpaper-per-workspace-alist' and `wallpaper-per-workspace-get'."
      :lighter " PW"
      :global t
      :group 'wallpaper
      (wallpaper--toggle-per-workspace))

    (defun wallpaper--toggle-per-workspace ()
      "Add or remove setting the wallpaper to `exwm-workspace-switch-hook'."
      (if wallpaper-per-workspace-mode
          (add-hook 'exwm-workspace-switch-hook #'wallpaper-set-wallpaper)
        (remove-hook 'exwm-workspace-switch-hook #'wallpaper-set-wallpaper)))

    <<per-workspace-funcs>>
  #+end_src

* End :noexport:

  #+begin_src emacs-lisp
    

    (provide 'wallpaper)

    ;;; wallpaper.el ends here
  #+end_src
